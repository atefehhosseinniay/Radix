import os
from pdfminer.high_level import extract_text
from pdfminer.pdfparser import PDFSyntaxError, PSEOF
from typing import Union, List

class PDFExtractor:
  def __init__(self, dir: str, max_iter: Union[int, None] = None):
    self.path: str = dir
    self.files = os.listdir(dir)
    if len(self.files) == 0:
      raise Exception("No files in directory")

    # iterator
    self.i = 0
    if type(max_iter) == int:
      self.max = max_iter if len(self.files) > max_iter else len(self.files)
    else:
      self.max = len(self.files)
  
  def __iter__(self):
    return self
  
  def __next__(self) -> str:
    if self.i < self.max:
      text = self._get_text_(self.path + self.files[self.i])
      self.i += 1
      return text
    raise StopIteration

  def get_pdf_list(self) -> List[str]:
    '''
    Get list of pdf files as read in the given directory
    :return: list of pdf files
    '''
    return self.files
  
  def get_pdf_by_id(self, id: int) -> str:
    '''
    Get pdf text by id
    :param id: ID of the file in filelist. File list is generated by collecting all the files in gived directory
    :return: extracted text from the pdf
    '''
    if id > len(self.files):
      raise IndexError("index out of range")
    return self._get_text_(self.path + self.files[id])

  def get_pdf_by_name(self, file_name: str) -> str:
    '''
    Get pdf text by file name
    :param file_name: name of the pdf file you want to get text
    :return: extracted text from the pdf
    '''
    return self._get_text_(self.path + file_name)
  
  @staticmethod
  def _get_text_(path: str) -> str:
    try:
      text = extract_text(path)
      return text
    except PDFSyntaxError as e:
      print(f'{path}: {e}')
    except PSEOF as e:
      print(f'{path}: {e}')
    return ''
